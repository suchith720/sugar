# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/11_msmarco_config_file.ipynb.

# %% auto 0
__all__ = ['get_msmarco_config']

# %% ../nbs/11_msmarco_config_file.ipynb 2
import json
from xcai.config import PARAM

# %% ../nbs/11_msmarco_config_file.ipynb 3
def get_msmarco_config(data_dir, model, entity_type):
    return {
        f"data_{model}_{entity_type}": {
            "path": {
                "train": {
                    "data_lbl": f"{data_dir}/trn_X_Y.npz",
                    "data_info": f"{data_dir}/raw_data/train.raw.txt",
                    "lbl_info": f"{data_dir}/raw_data/passages.raw.txt",
                    "ent_meta": {
                        "prefix": "ent",
                        "data_meta": f"{data_dir}/{model}_{entity_type}_trn_X_Y.npz",
                        "lbl_meta": f"{data_dir}/{model}_{entity_type}_lbl_X_Y.npz",
                        "meta_info": f"{data_dir}/raw_data/{model}_{entity_type}.raw.txt"
                    }
                },
                "test": {
                    "data_lbl": f"{data_dir}/tst_X_Y.npz",
                    "data_info": f"{data_dir}/XC/raw_data/test.raw.txt",
                    "lbl_info": f"{data_dir}/raw_data/passages.raw.txt",
                    "ent_meta": {
                        "prefix": "ent",
                        "data_meta": f"{data_dir}/{model}_{entity_type}_tst_X_Y.npz",
                        "lbl_meta": f"{data_dir}/{model}_{entity_type}_lbl_X_Y.npz",
                        "meta_info": f"{data_dir}/raw_data/{model}_{entity_type}.raw.txt"
                    }
                }
            },
            "parameters": PARAM,
        }
    }

# %% ../nbs/11_msmarco_config_file.ipynb 4
if __name__ == '__main__':
    data_dir = "/home/scai/phd/aiz218323/scratch/datasets/msmarco-data/XC/"
    
    models = ['gpt', 'llama']
    entity_types = ['entity', 'canonical', 'category', 'entity_canonical', 'entity_canonical_category']
    
    config = dict()
    for model in models:
        for entity_type in entity_types:
            config.update(get_msmarco_config(data_dir, model, entity_type))
    
    with open(f'{data_dir}/config.json', 'w') as file:
        json.dump(config, file, indent=4)
