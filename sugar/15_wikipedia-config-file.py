# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/15_wikipedia-config-file.ipynb.

# %% auto 0
__all__ = ['METADATA_CODE', 'get_wikipedia_config', 'parse_args']

# %% ../nbs/15_wikipedia-config-file.ipynb 2
import json, os, argparse
from xcai.config import PARAM

# %% ../nbs/15_wikipedia-config-file.ipynb 4
METADATA_CODE = {'category': 'cat', 'hyper_link': 'hlk', 'see_also':'sal'}

# %% ../nbs/15_wikipedia-config-file.ipynb 5
def get_wikipedia_config(data_dir, metadata_type='', x_prefix='', y_prefix='', z_prefix='', raw_ext='txt', linker_type=''):
    metadata_suffix = f'_{metadata_type}' if len(metadata_type) else ''
    linker_suffix = f'_{linker_type}' if len(linker_type) else ''

    xy_prefix = xyz_prefix = xr_prefix = yr_prefix = zr_prefix = ''
    if len(x_prefix) and len(y_prefix) and len(z_prefix):
        xy_prefix = f'_{x_prefix}-{y_prefix}'
        xyz_prefix = f'_{x_prefix}-{y_prefix}-{z_prefix}'
        
        xr_prefix = f'.{x_prefix}'
        yr_prefix = f'.{x_prefix}-{y_prefix}'
        zr_prefix = f'.{x_prefix}-{y_prefix}-{z_prefix}'

    key = f"data{metadata_suffix}{xyz_prefix}"
    if len(linker_type): key = f'{key}_linker'
        
    config = {
        key : {
            "path": {
                "train": {
                    "data_lbl": f"{data_dir}/trn_X_Y{xy_prefix}.npz",
                    "data_info": f"{data_dir}/raw_data/train{xr_prefix}.raw.{raw_ext}",
                    "lbl_info": f"{data_dir}/raw_data/label{yr_prefix}.raw.{raw_ext}",
                    "data_lbl_filterer": f"{data_dir}/filter_labels_train{xy_prefix}.txt",
                },
                "test": {
                    "data_lbl": f"{data_dir}/tst_X_Y{xy_prefix}.npz",
                    "data_info": f"{data_dir}/raw_data/test{xr_prefix}.raw.{raw_ext}",
                    "lbl_info": f"{data_dir}/raw_data/label{yr_prefix}.raw.{raw_ext}",
                    "data_lbl_filterer": f"{data_dir}/filter_labels_test{xy_prefix}.txt",
                }
            },
            "parameters": PARAM,
        }
    }

    if len(metadata_type):
        meta_code = 'lnk' if len(linker_type) else METADATA_CODE[metadata_type]
        config[key]['path']['train'][f'{meta_code}_meta'] = {
            "prefix": meta_code,
            "data_meta": f"{data_dir}/{metadata_type}{linker_suffix}_trn_X_Y{xyz_prefix}.npz",
            "lbl_meta": f"{data_dir}/{metadata_type}{linker_suffix}_lbl_X_Y{xyz_prefix}.npz",
            "meta_info": f"{data_dir}/raw_data/{metadata_type}{zr_prefix}.raw.{raw_ext}"
        }
        config[key]['path']['test'][f'{meta_code}_meta'] = {
            "prefix": meta_code,
            "data_meta": f"{data_dir}/{metadata_type}{linker_suffix}_tst_X_Y{xyz_prefix}.npz",
            "lbl_meta": f"{data_dir}/{metadata_type}{linker_suffix}_lbl_X_Y{xyz_prefix}.npz",
            "meta_info": f"{data_dir}/raw_data/{metadata_type}{zr_prefix}.raw.{raw_ext}"
        }

    return config
    

# %% ../nbs/15_wikipedia-config-file.ipynb 6
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_dir', type=str, required=True)
    parser.add_argument('--metadata_type', type=str, default='')
    parser.add_argument('--x_prefix', type=str, default='')
    parser.add_argument('--y_prefix', type=str, default='')
    parser.add_argument('--z_prefix', type=str, default='')
    parser.add_argument('--raw_ext', type=str, default='txt')
    parser.add_argument('--linker_type', type=str, default='')
    return parser.parse_args()
    

# %% ../nbs/15_wikipedia-config-file.ipynb 8
if __name__ == '__main__':
    args = parse_args()
    
    config = get_wikipedia_config(args.data_dir, args.metadata_type, args.x_prefix, args.y_prefix, args.z_prefix, args.raw_ext, args.linker_type)
    os.makedirs(f'{args.data_dir}/configs/', exist_ok=True)

    metadata_type = f'_{args.metadata_type}' if len(args.metadata_type) else ''
    prefix = f'_{args.x_prefix}-{args.y_prefix}-{args.z_prefix}' if len(args.x_prefix) and len(args.y_prefix) and len(args.z_prefix) else ''
    with open(f'{args.data_dir}/configs/data{metadata_type}{prefix}.json', 'w') as file:
        json.dump(config, file, indent=4)
        
