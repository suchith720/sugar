# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb.

# %% auto 0
__all__ = ['extract_text_between_tags', 'extract_generations', 'get_file_key', 'collate_generations',
           'extract_and_save_generations', 'parse_args']

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 2
import pandas as pd, re, numpy as np, os
from tqdm.auto import tqdm

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 3
from .core import load_raw_file, save_raw_file

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 4
def extract_text_between_tags(text, tag='Label'):
    pattern = fr"<{tag}>(.*?)</{tag}>"
    match = re.search(pattern, text)
    return match.group(1).strip() if match else ''
    

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 5
def extract_generations(df, tag='Label'):
    generations = []
    for i in range(df.shape[0]):
        text = df['raw_model_response'].iloc[i]
        text = extract_text_between_tags(text, tag=tag)
        generations.append(text)
    title = df['title'].tolist()
    return title, generations
    

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 6
def get_file_key(fname):
    key = re.match(r'[a-z]*([0-9]+).tsv', fname)
    return int(key.group(1))
    

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 7
def collate_generations(data_dir, tag='Label'):
    title, generations = [], []

    for fname in tqdm(sorted(os.listdir(data_dir), key=get_file_key)):
        df = pd.read_table(f'{data_dir}/{fname}')
        df.fillna('', inplace=True)
        t, g = extract_generations(df, tag=tag)
        title.extend(t)
        generations.extend(g)

    return title, generations
    

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 15
def extract_and_save_generations(generation_dir, data_dir, data_type, tag, save_tag):
    gen_title, gen_text = collate_generations(generation_dir)
    fname = f'{data_dir}/test.raw.txt' if data_type == 'test' else f'{data_dir}/train.raw.txt'
    ids, text = load_raw_file(fname)
    
    mapping = {k:v for k,v in zip(gen_title, gen_text)}
    
    entity_text = [f'{o} :: {mapping[o]}' if o in mapping else o for o in text]
    fname = f'{data_dir}/test_{save_tag}.raw.txt' if data_type == 'test' else f'{data_dir}/train_{save_tag}.raw.txt'
    save_raw_file(fname, ids, entity_text)
    

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 21
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--generation_dir', type=str, required=True)
    parser.add_argument('--data_dir', type=str, required=True)
    parser.add_argument('--tag', type=str, default='Label')
    parser.add_argument('--data_type', type=str, default=None)
    parser.add_argument('--save_tag', type=str, default='entity')
    return parser.parse_args()
    

# %% ../nbs/19_map-amazon-meta-from-gpt-generations.ipynb 22
if __name__ == '__main__':
    start_time = timer()

    args = parse_args()
    extract_and_save_generations(args.generation_dir, args.data_dir, args.data_type, args.tag, args.save_tag)
    
    end_time = timer()
    print(f'Time elapsed: {end_time-start_time:.2f} seconds.')
    
