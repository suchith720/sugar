# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_msmarco-hard-negatives.ipynb.

# %% auto 0
__all__ = ['load_msmarco_hard_negatives', 'parse_args']

# %% ../nbs/20_msmarco-hard-negatives.ipynb 2
import pickle, scipy.sparse as sp, numpy as np, argparse
from tqdm.auto import tqdm
from typing import Optional, List

from xcai.main import *
from .core import *

# %% ../nbs/20_msmarco-hard-negatives.ipynb 4
def load_msmarco_hard_negatives(fname:str, data_ids:Optional[List]=None):
    with open(fname, 'rb') as file:
        negatives = pickle.load(file)

    data_ids = list(negatives) if data_ids is None else data_ids

    lbl_id2idx = dict()
    data, indices, indptr = [], [], [0]
    for idx in tqdm(data_ids):
        if idx in negatives:
            data.extend(list(negatives[idx].values()))
            for i in negatives[idx]:
                index = lbl_id2idx.setdefault(i, len(lbl_id2idx))
                indices.append(index)
        indptr.append(len(data))

    lbl_ids = sorted(lbl_id2idx, key=lambda x: lbl_id2idx[x])
    return data_ids, lbl_ids, sp.csr_matrix((data, indices, indptr), dtype=np.float32)
    

# %% ../nbs/20_msmarco-hard-negatives.ipynb 19
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--pkl_dir', action='store_true')
    parser.add_argument('--data_dir', action='store_true')
    return parser.parse_args()
    

# %% ../nbs/20_msmarco-hard-negatives.ipynb 20
if __name__ == '__main__':
    args = parse_args()
    
    config_file = f'{args.data_dir}/XC/configs/entity_gpt_exact.json'
    config_key = 'data_entity-gpt_exact'
    
    use_sxc_sampler = True
    pkl_file = f'{args.pkl_dir}/mogicX/msmarco_data-meta_distilbert-base-uncased_sxc.joblib'
    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, use_sxc_sampler, config_key, do_build=False, only_test=False)

    neg_file = f"{args.data_dir}/negatives/cross-encoder-ms-marco-MiniLM-L-6-v2-scores.pkl"

    trn_ids = [int(i) for i in block.train.dset.data.data_info['identifier']]
    data_ids, neg_ids, data_neg = load_msmarco_hard_negatives(neg_file, trn_ids)
    lbl_neg = sp.csr_matrix((block.n_lbl, data_neg.shape[1]), dtype=np.float32)
    
    sp.save_npz(f'{args.data_dir}/XC/negatives_trn_X_Y.npz', data_neg)
    sp.save_npz(f'{args.data_dir}/XC/negatives_lbl_X_Y_exact.npz', lbl_neg)

    lbl_file = f'{args.data_dir}/XC/raw_data/label.raw.txt'
    lbl_ids, lbl_txt = load_raw_file(lbl_file)
    lbl_map = {k:v for k,v in zip(lbl_ids, lbl_txt)}

    neg_txt = [lbl_map[str(i)] for i in neg_ids]
    save_raw_file(f'{args.data_dir}/XC/raw_data/negatives.raw.txt', neg_ids, neg_txt)
    
