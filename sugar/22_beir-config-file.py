# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/22_beir-config-file.ipynb.

# %% auto 0
__all__ = ['get_config_key', 'get_dataset_config', 'parse_args']

# %% ../nbs/22_beir-config-file.ipynb 2
import json, os, argparse

from typing import Optional
from xcai.config import PARAM

# %% ../nbs/22_beir-config-file.ipynb 4
def get_config_key(model:Optional[str]='', entity_type:Optional[str]='', suffix:Optional[str]=''):
    key = "data"
    if len(entity_type): key = f"{key}_{entity_type}"
    if len(model): key = f"{key}-{model}"
    if len(suffix): key = f"{key}_{suffix}"
    return key
    

# %% ../nbs/22_beir-config-file.ipynb 5
def get_dataset_config(data_dir:str, model:Optional[str]='', entity_type:Optional[str]='', suffix:Optional[str]='', 
                       add_trn_cfg:Optional[bool]=True, add_linker_cfg:Optional[bool]=True, **kwargs):
    mat_suffix = f'_{suffix}' if len(suffix) else ''
    raw_suffix = f'.{suffix}' if len(suffix) else ''

    cfg_key = get_config_key(model, entity_type, suffix)
    
    entity_suffix = f'{entity_type}_' if len(entity_type) else ''
    if len(model): entity_suffix = f'{entity_suffix}{model}_'

    PARAM["main_max_lbl_sequence_length"] = 128
    for k,v in kwargs.items():
        if k in PARAM and v is not None: PARAM[k] = v
            
    cfg = {
        cfg_key: {
            "path": {},
            "parameters": PARAM,
        }
    }
    
    if add_trn_cfg:
        trn_cfg = {
            "data_lbl": f"{data_dir}/trn_X_Y{mat_suffix}.npz",
            "data_info": f"{data_dir}/raw_data/train.raw.csv",
            "lbl_info": f"{data_dir}/raw_data/label{raw_suffix}.raw.csv",
        }
        if add_linker_cfg:
            trn_meta_cfg = {
                "prefix": "ent",
                "data_meta": f"{data_dir}/{entity_suffix}trn_X_Y.npz",
                "lbl_meta": f"{data_dir}/{entity_suffix}lbl_X_Y{mat_suffix}.npz",
                "meta_info": f"{data_dir}/raw_data/{entity_suffix[:-1]}.raw.csv"
            }
            trn_cfg["ent_meta"] = trn_meta_cfg
        cfg[cfg_key]["path"]["train"] = trn_cfg

    tst_cfg = {
        "data_lbl": f"{data_dir}/tst_X_Y{mat_suffix}.npz",
        "data_info": f"{data_dir}/raw_data/test.raw.csv",
        "lbl_info": f"{data_dir}/raw_data/label{raw_suffix}.raw.csv",
    }
    if add_linker_cfg:
        tst_meta_cfg = {
            "prefix": "ent",
            "data_meta": f"{data_dir}/{entity_suffix}tst_X_Y.npz",
            "lbl_meta": f"{data_dir}/{entity_suffix}lbl_X_Y{mat_suffix}.npz",
            "meta_info": f"{data_dir}/raw_data/{entity_suffix[:-1]}.raw.csv"
        }
        tst_cfg["ent_meta"] = tst_meta_cfg
    cfg[cfg_key]["path"]["test"] = tst_cfg
    
    return cfg
    

# %% ../nbs/22_beir-config-file.ipynb 6
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_dir', type=str, required=True)
    parser.add_argument('--model', type=str, default='')
    parser.add_argument('--entity_type', type=str, default='')
    parser.add_argument('--suffix', type=str, default='')
    parser.add_argument('--add_trn_cfg', type=int, default=1)
    parser.add_argument('--add_linker_cfg', type=int, default=1)
    parser.add_argument('--add_linker_cfg', type=int, default=1)
    parser.add_argument('--main_max_lbl_sequence_length', type=int, default=None)
    return parser.parse_args()
    

# %% ../nbs/22_beir-config-file.ipynb 8
if __name__ == '__main__':
    args = parse_args()
    
    config = get_dataset_config(args.data_dir, args.model, args.entity_type, args.suffix, add_trn_cfg=args.add_trn_cfg, 
                                add_linker_cfg=args.add_linker_cfg, main_max_lbl_sequence_length=args.main_max_lbl_sequence_length)
    os.makedirs(f'{args.data_dir}/configs/', exist_ok=True)

    fname = get_config_key(args.model, args.entity_type, args.suffix)
    
    with open(f'{args.data_dir}/configs/{fname}.json', 'w') as file:
        json.dump(config, file, indent=4)
        
