# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/22_beir-config-file.ipynb.

# %% auto 0
__all__ = ['get_dataset_config', 'parse_args']

# %% ../nbs/22_beir-config-file.ipynb 2
import json, os, argparse
from xcai.config import PARAM

# %% ../nbs/22_beir-config-file.ipynb 4
def get_dataset_config(data_dir, model='', entity_type='', suffix='', add_trn_cfg=True, add_linker_cfg=True):
    mat_suffix = f'_{suffix}' if len(suffix) else ''
    raw_suffix = f'.{suffix}' if len(suffix) else ''

    cfg_key = f"data_{entity_type}{model}{mat_suffix}" if len(entity_type) and len(model) and len(mat_suffix) else "data"
    
    entity_suffix = f'{entity_type}_' if len(entity_type) else ''
    if len(model): entity_suffix = f'{entity_suffix}{model}_'
    
    cfg = {
        cfg_key: {
            "path": {},
            "parameters": PARAM,
        }
    }

    if add_trn_cfg:
        trn_cfg = {
            "data_lbl": f"{data_dir}/trn_X_Y{mat_suffix}.npz",
            "data_info": f"{data_dir}/raw_data/train.raw.txt",
            "lbl_info": f"{data_dir}/raw_data/label{raw_suffix}.raw.txt",
        }
        if add_linker_cfg:
            trn_meta_cfg = {
                "prefix": "ent",
                "data_meta": f"{data_dir}/{entity_suffix}trn_X_Y.npz",
                "lbl_meta": f"{data_dir}/{entity_suffix}lbl_X_Y{mat_suffix}.npz",
                "meta_info": f"{data_dir}/raw_data/{entity_suffix[:-1]}.raw.txt"
            }
            trn_cfg["ent_meta"] = trn_meta_cfg
        cfg[cfg_key]["path"]["train"] = trn_cfg

    tst_cfg = {
        "data_lbl": f"{data_dir}/tst_X_Y{mat_suffix}.npz",
        "data_info": f"{data_dir}/raw_data/test.raw.txt",
        "lbl_info": f"{data_dir}/raw_data/label{raw_suffix}.raw.txt",
    }
    if add_linker_cfg:
        tst_meta_cfg = {
            "prefix": "ent",
            "data_meta": f"{data_dir}/{entity_suffix}tst_X_Y.npz",
            "lbl_meta": f"{data_dir}/{entity_suffix}lbl_X_Y{mat_suffix}.npz",
            "meta_info": f"{data_dir}/raw_data/{entity_suffix[:-1]}.raw.txt"
        }
        tst_cfg["ent_meta"] = tst_meta_cfg
    cfg[cfg_key]["path"]["test"] = tst_cfg
    
    return cfg
    

# %% ../nbs/22_beir-config-file.ipynb 5
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data_dir', type=str, required=True)
    parser.add_argument('--model', type=str, required=None)
    parser.add_argument('--entity_type', type=str, required=None)
    parser.add_argument('--suffix', type=str, default='')
    parser.add_argument('--add_trn_cfg', type=bool, default=True)
    parser.add_argument('--add_linker_cfg', type=bool, default=True)
    return parser.parse_args()
    

# %% ../nbs/22_beir-config-file.ipynb 7
if __name__ == '__main__':
    args = parse_args()
    
    config = get_dataset_config(args.data_dir, args.model, args.entity_type, args.suffix, add_trn_cfg=args.add_trn_cfg, 
                                add_linker_cfg=args.add_linker_cfg)
    os.makedirs(f'{args.data_dir}/configs/', exist_ok=True)

    fname = f"data_{args.entity_type}{args.model}{args.suffix}" if len(args.entity_type) and len(args.model) and len(args.suffix) else "data"
    with open(f'{args.data_dir}/configs/{fname}.json', 'w') as file:
        json.dump(config, file, indent=4)
        
