# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/23_natural-questions-dataset.ipynb.

# %% auto 0
__all__ = ['load_kaggle_data', 'QueryInfo', 'LabelInfo', 'get_kaggle_dataset', 'save_dataset', 'get_and_save_kaggle_dataset',
           'parse_args']

# %% ../nbs/23_natural-questions-dataset.ipynb 2
import os, json, pandas as pd, scipy.sparse as sp, numpy as np, argparse

from tqdm.auto import tqdm
from datasets import load_dataset
from dataclasses import dataclass
from huggingface_hub import snapshot_download

from .core import *

# %% ../nbs/23_natural-questions-dataset.ipynb 7
def load_kaggle_data(fname, key='positive_ctxs'):
    with open(fname) as file:
        content = json.load(file)

    queries, labels, lbl_id2idx = [], [], {}
    data, indices, indptr = [], [], [0]
    for o in tqdm(content):
        queries.append(o['question'])
        if key in o:
            for lbl in o[key]:
                lbl_id = lbl['id'] if 'id' in lbl else lbl['passage_id']
        
                if lbl_id in lbl_id2idx: 
                    idx = lbl_id2idx[lbl_id]
                else:
                    idx = len(lbl_id2idx)
                    lbl_id2idx[lbl_id] = len(lbl_id2idx)
                    labels.append(lbl['text'])
                data.append(1)
                indices.append(idx)
            indptr.append(len(indices))
    matrix = sp.csr_matrix((data, indices, indptr), dtype=np.float32)
    return queries, labels, lbl_id2idx, matrix
    

# %% ../nbs/23_natural-questions-dataset.ipynb 8
@dataclass
class QueryInfo:
    mat: sp.csr_matrix
    ids: list
    txt: list

    def sample_labels(self, lbl_idx:list):
        data_idx = np.where(self.mat.getnnz(axis=1) > 0)[0]
        
        self.mat = self.mat[:, lbl_idx][data_idx, :]
        self.ids = [self.ids[i] for i in data_idx]
        self.txt = [self.txt[i] for i in data_idx]

@dataclass
class LabelInfo:
    ids: list
    txt: list

    def sample(self, valid_idx:list):
        self.ids = [self.ids[i] for i in valid_idx]
        self.txt = [self.txt[i] for i in valid_idx]
    

# %% ../nbs/23_natural-questions-dataset.ipynb 9
def get_kaggle_dataset(fname, key='positive_ctxs'):
    qry_txt, lbl_txt, lbl_id2idx, qry_mat = load_kaggle_data(fname, key)

    qry_info = QueryInfo(qry_mat, qry_txt, qry_txt)
    
    lbl_ids = sorted(lbl_id2idx, key=lambda x: lbl_id2idx[x])
    lbl_info = LabelInfo(lbl_ids, lbl_txt)
    
    return qry_info, lbl_info
    

# %% ../nbs/23_natural-questions-dataset.ipynb 18
def save_dataset(save_dir, lbl_info, tst_info=None, trn_info=None, suffix=''):
    os.makedirs(save_dir, exist_ok=True)
    x_suffix = f'_{suffix}' if len(suffix) else ''

    if trn_info is not None: sp.save_npz(f'{save_dir}/trn_X_Y{x_suffix}.npz', trn_info.mat)
    if tst_info is not None: sp.save_npz(f'{save_dir}/tst_X_Y{x_suffix}.npz', tst_info.mat)
    
    os.makedirs(f'{save_dir}/raw_data', exist_ok=True)
    y_suffix = f'.{suffix}' if len(suffix) else ''
    if trn_info is not None: save_raw_file(f'{save_dir}/raw_data/train.raw.csv', trn_info.ids, trn_info.txt)
    if tst_info is not None: save_raw_file(f'{save_dir}/raw_data/test.raw.csv', tst_info.ids, tst_info.txt)
    save_raw_file(f'{save_dir}/raw_data/label{y_suffix}.raw.csv', lbl_info.ids, lbl_info.txt)
    

# %% ../nbs/23_natural-questions-dataset.ipynb 19
def get_and_save_kaggle_dataset(fname:str, key='positive_ctxs', save_dir:str=None, suffix=''):
    qry_info, lbl_info = get_kaggle_dataset(fname, key=key)
    if save_dir is not None: save_dataset(save_dir, lbl_info, trn_info=qry_info, suffix=suffix)
    return qry_info, lbl_info
    

# %% ../nbs/23_natural-questions-dataset.ipynb 20
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--fname', type=str, required=True)
    parser.add_argument('--key', type=str, default='positive_ctxs')
    parser.add_argument('--save_dir', type=str, default=None)
    parser.add_argument('--suffix', type=str, default='')
    
    return parser.parse_args()
    

# %% ../nbs/23_natural-questions-dataset.ipynb 21
if __name__ == '__main__':
    args = parse_args()
    get_and_save_kaggle_dataset(args.fname, key=args.key, save_dir=args.save_dir, suffix=args.suffix)
                          
