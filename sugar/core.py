# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['load_raw_txt', 'get_all_ids', 'filter_mapping', 'create_vocab_and_item2idx', 'save_raw_txt',
           'get_matrix_from_item2idx', 'get_matrix_from_mapping']

# %% ../nbs/00_core.ipynb 2
import scipy.sparse as sp, numpy as np
from tqdm.auto import tqdm

# %% ../nbs/00_core.ipynb 3
def load_raw_txt(fname, encoding='utf-8'):
    ids, raw_txt = [], []
    with open(fname, 'r', encoding=encoding) as file:
        for line in file:
            k, v = line[:-1].split('->', maxsplit=1)
            ids.append(k); raw_txt.append(v)
    return ids, raw_txt
    

# %% ../nbs/00_core.ipynb 4
def get_all_ids(raw_dir, encoding='utf-8'):
    trn_ids, _ = load_raw_txt(f'{raw_dir}/train.raw.txt', encoding)
    tst_ids, _ = load_raw_txt(f'{raw_dir}/test.raw.txt', encoding)
    lbl_ids, _ = load_raw_txt(f'{raw_dir}/label.raw.txt', encoding)
    return set(trn_ids + tst_ids + lbl_ids)
    

# %% ../nbs/00_core.ipynb 5
def filter_mapping(mapping, ids):
    return {k:v for k,v in mapping.items() if k in set(ids)}

# %% ../nbs/00_core.ipynb 6
def create_vocab_and_item2idx(mapping):
    mapping_item2idx, vocab = dict(), dict()
    for k,v in tqdm(mapping.items()):
        for o in v:
            idx = vocab.setdefault(o, len(vocab))
            l = mapping_item2idx.setdefault(k, [])
            l.append(idx)
    return vocab, mapping_item2idx
    

# %% ../nbs/00_core.ipynb 7
def save_raw_txt(fn, ids, raw_txt, encoding='utf-8'):
    assert len(ids) == len(raw_txt), "Number of identifiers and elements in raw text should be the same."
    with open(fn, 'w', encoding=encoding) as file:
        for i,txt in zip(ids, raw_txt):
            file.write(f'{i}->{txt}\n')

# %% ../nbs/00_core.ipynb 8
def get_matrix_from_item2idx(mapping, vocab_size, ids=None):
    data, indices, indptr = [], [], [0]
    ids = list(mapping) if ids is None else ids
    for i in tqdm(ids):
        if i in mapping:
            item_idx = mapping[i]
            data.extend([1]*len(item_idx))
            indices.extend(item_idx)
        indptr.append(len(data))
    return sp.csr_matrix((data, indices, indptr), shape=(len(ids), vocab_size), dtype=np.int64), ids
    

# %% ../nbs/00_core.ipynb 9
def get_matrix_from_mapping(mapping, ids=None):
    if ids is not None:
        mapping = filter_mapping(mapping, ids)
    vocab, mapping_item2idx = create_vocab_and_item2idx(mapping)
    matrix, ids = get_matrix_from_item2idx(mapping_item2idx, len(vocab))
    return matrix, ids, vocab
